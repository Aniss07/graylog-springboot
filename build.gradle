buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://repo.spring.io/milestone/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
	}
}

apply plugin: 'java'
apply plugin: 'spring-boot'

processResources {
	expand(project.properties + properties)
}

jar {
	baseName = "${rootProject.name}"
	version = "${version}"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven {
		url "https://repo.spring.io/milestone/"
	}
}

dependencies {
	compile("org.projectlombok:lombok:${lombokVersion}")
	compile("javax.inject:javax.inject:${javaxInjectVersion}")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-data-elasticsearch")
	compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")
	compile("io.springfox:springfox-swagger2:${springfoxVersion}")

	compile("de.flapdoodle.embed:de.flapdoodle.embed.mongo:${embeddedMongoVersion}")

	compile("org.apache.commons:commons-lang3:${commonsLang3Version}")

	// Need this to get the Rest API classes - sure wish it was in a separate Jar from the other Graylog code!
	compile("org.graylog2:graylog2-server:${graylogVersion}") {
		transitive = false
	}

	compile("com.fasterxml.jackson.datatype:jackson-datatype-joda");

	testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.12'
}

task prepareGraylog(dependsOn: 'extractGraylog') {
}

task downloadGraylog() {
	def archive = new File("graylog/graylog-${graylogVersion}.tgz")
	if (!archive.exists()) {
		println "Downloading Graylog version ${graylogVersion}..."
		new URL("http://packages.graylog2.org/releases/graylog/graylog-${graylogVersion}.tgz")
				.withInputStream{ i -> archive.withOutputStream{ it << i }}
	} else {
		println "Graylog archive already exists, skipping..."
	}
}

task extractGraylog(type: Copy, dependsOn: 'downloadGraylog') {
	def archive = new File("graylog/graylog-${graylogVersion}.tgz")
	def destinationDir = file("graylog/graylog-${graylogVersion}")
	def outputDir = file("graylog")

	if (!destinationDir.exists()) {
		println "Extracting graylog archive..."
		from tarTree(archive)
		into outputDir
		println "Graylog extracted."
	} else {
		println "Graylog archive already extracted, skipping..."
	}
}

bootRun.dependsOn prepareGraylog